"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_src_services_posts_ts";
exports.ids = ["_ssr_src_services_posts_ts"];
exports.modules = {

/***/ "(ssr)/./src/services/mockData.ts":
/*!**********************************!*\
  !*** ./src/services/mockData.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mockComments: () => (/* binding */ mockComments),\n/* harmony export */   mockPosts: () => (/* binding */ mockPosts),\n/* harmony export */   mockReports: () => (/* binding */ mockReports),\n/* harmony export */   mockUsers: () => (/* binding */ mockUsers)\n/* harmony export */ });\n// Archivo para almacenar datos simulados durante el desarrollo\n// Datos mock iniciales\nconst mockPosts = [\n    {\n        id: 1,\n        title: 'Introducción a Next.js',\n        content: '# Introducción a Next.js\\n\\nNext.js es un framework de React que permite la creación de aplicaciones web modernas. Proporciona varias características útiles como renderizado del lado del servidor (SSR), generación de sitios estáticos (SSG), y más.\\n\\n## Características principales\\n\\n- **Renderizado del lado del servidor (SSR)**: Mejora SEO y tiempo de carga inicial.\\n- **Generación de sitios estáticos (SSG)**: Excelente para contenido que no cambia frecuentemente.\\n- **API Routes**: Permite crear APIs fácilmente.\\n\\n```javascript\\n// Ejemplo de una API route\\nexport default function handler(req, res) {\\n  res.status(200).json({ name: \\'John Doe\\' });\\n}\\n```',\n        date: '2025-06-10T12:00:00Z',\n        status: 'approved',\n        likes: 15,\n        userId: 'user_123',\n        user: {\n            name: 'Ana Torres',\n            nickname: 'anatrs',\n            profile_picture: 'https://randomuser.me/api/portraits/women/12.jpg',\n            clerkId: 'user_123'\n        }\n    },\n    {\n        id: 2,\n        title: 'Optimización de rendimiento en React',\n        content: '# Optimización de rendimiento en React\\n\\nLa optimización del rendimiento en React es crucial para mantener una experiencia de usuario fluida. Aquí compartimos algunos consejos útiles.\\n\\n## Consejos de optimización\\n\\n1. **Memoización**: Utiliza React.memo, useMemo y useCallback para evitar re-renders innecesarios.\\n2. **Virtualization**: Implementa una renderización virtualizada para listas largas.\\n3. **Code Splitting**: Divide tu código para cargar solo lo necesario.\\n\\n```jsx\\n// Ejemplo con useMemo\\nconst memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);\\n```',\n        date: '2025-06-15T15:30:00Z',\n        status: 'approved',\n        likes: 8,\n        userId: 'user_456',\n        user: {\n            name: 'Carlos Méndez',\n            nickname: 'carlosdev',\n            profile_picture: 'https://randomuser.me/api/portraits/men/22.jpg',\n            clerkId: 'user_456'\n        }\n    },\n    {\n        id: 3,\n        title: 'Introducción a TypeScript con React',\n        content: '# Introducción a TypeScript con React\\n\\nTypeScript mejora enormemente la experiencia de desarrollo con React al proporcionar tipado estático. Vamos a ver cómo iniciarse.\\n\\n## Configuración inicial\\n\\n1. Instala TypeScript: `npm install typescript @types/react @types/react-dom`\\n2. Crea un archivo tsconfig.json\\n3. Convierte tus archivos .jsx a .tsx\\n\\n## Ejemplo de componente con TypeScript\\n\\n```tsx\\ninterface ButtonProps {\\n  text: string;\\n  onClick?: () => void;\\n  color?: \\'primary\\' | \\'secondary\\';\\n}\\n\\nconst Button: React.FC<ButtonProps> = ({ text, onClick, color = \\'primary\\' }) => {\\n  return (\\n    <button \\n      className={`btn btn-${color}`} \\n      onClick={onClick}\\n    >\\n      {text}\\n    </button>\\n  );\\n};\\n```',\n        date: '2025-06-18T09:45:00Z',\n        status: 'pending',\n        likes: 0,\n        userId: 'user_456',\n        user: {\n            name: 'Carlos Méndez',\n            nickname: 'carlosdev',\n            profile_picture: 'https://randomuser.me/api/portraits/men/22.jpg',\n            clerkId: 'user_456'\n        }\n    },\n    {\n        id: 4,\n        title: 'Manejo de estado global con Context API',\n        content: '# Manejo de estado global con Context API\\n\\nLa Context API de React es una solución nativa para manejar estado global sin necesidad de bibliotecas externas.\\n\\n## Pasos para implementar Context API\\n\\n1. Crear el contexto con `React.createContext()`\\n2. Proporcionar el contexto con un `Provider`\\n3. Consumir el contexto con `useContext`\\n\\n```jsx\\n// Creación\\nconst ThemeContext = React.createContext(\\'light\\');\\n\\n// Provisión\\nfunction App() {\\n  return (\\n    <ThemeContext.Provider value=\\'dark\\'>\\n      <ThemedButton />\\n    </ThemeContext.Provider>\\n  );\\n}\\n\\n// Consumo\\nfunction ThemedButton() {\\n  const theme = useContext(ThemeContext);\\n  return <button className={theme}>Botón Temático</button>;\\n}\\n```',\n        date: '2025-06-19T14:20:00Z',\n        status: 'rejected',\n        likes: 0,\n        userId: 'user_789',\n        user: {\n            name: 'María López',\n            nickname: 'mariacode',\n            profile_picture: 'https://randomuser.me/api/portraits/women/45.jpg',\n            clerkId: 'user_789'\n        }\n    }\n];\nconst mockComments = [\n    {\n        id: 1,\n        content: 'Gran artículo, muy útil para entender los conceptos básicos de Next.js',\n        createdAt: '2025-06-11T14:30:00Z',\n        userId: 'user_456',\n        postId: 1,\n        user: {\n            name: 'Carlos Méndez',\n            nickname: 'carlosdev',\n            profile_picture: 'https://randomuser.me/api/portraits/men/22.jpg',\n            clerkId: 'user_456'\n        }\n    },\n    {\n        id: 2,\n        content: '¿Podrías profundizar más en las diferencias entre SSR y SSG?',\n        createdAt: '2025-06-12T10:15:00Z',\n        userId: 'user_789',\n        postId: 1,\n        user: {\n            name: 'María López',\n            nickname: 'mariacode',\n            profile_picture: 'https://randomuser.me/api/portraits/women/45.jpg',\n            clerkId: 'user_789'\n        }\n    },\n    {\n        id: 3,\n        content: 'Me gustaría ver ejemplos de cómo implementar la memoización en componentes complejos.',\n        createdAt: '2025-06-16T09:22:00Z',\n        userId: 'user_123',\n        postId: 2,\n        user: {\n            name: 'Ana Torres',\n            nickname: 'anatrs',\n            profile_picture: 'https://randomuser.me/api/portraits/women/12.jpg',\n            clerkId: 'user_123'\n        }\n    }\n];\nconst mockUsers = [\n    {\n        id: 1,\n        name: 'Ana Torres',\n        nickname: 'anatrs',\n        email: 'ana.torres@example.com',\n        profile_picture: 'https://randomuser.me/api/portraits/women/12.jpg',\n        clerkId: 'user_123',\n        role: 'USER',\n        createdAt: '2024-12-01T00:00:00Z'\n    },\n    {\n        id: 2,\n        name: 'Carlos Méndez',\n        nickname: 'carlosdev',\n        email: 'carlos.mendez@example.com',\n        profile_picture: 'https://randomuser.me/api/portraits/men/22.jpg',\n        clerkId: 'user_456',\n        role: 'USER',\n        createdAt: '2025-01-15T00:00:00Z'\n    },\n    {\n        id: 3,\n        name: 'María López',\n        nickname: 'mariacode',\n        email: 'maria.lopez@example.com',\n        profile_picture: 'https://randomuser.me/api/portraits/women/45.jpg',\n        clerkId: 'user_789',\n        role: 'MODERATOR',\n        createdAt: '2025-02-20T00:00:00Z'\n    },\n    {\n        id: 4,\n        name: 'Juan Pérez',\n        nickname: 'juandev',\n        email: 'juan.perez@example.com',\n        profile_picture: 'https://randomuser.me/api/portraits/men/32.jpg',\n        clerkId: 'user_101',\n        role: 'ADMIN',\n        createdAt: '2024-11-05T00:00:00Z'\n    }\n];\nconst mockReports = [\n    {\n        id: 1,\n        reason: 'inappropriate',\n        description: 'Este contenido contiene lenguaje inapropiado',\n        postId: 4,\n        reporterId: 'user_123',\n        createdAt: '2025-06-20T16:45:00Z',\n        status: 'pending'\n    },\n    {\n        id: 2,\n        reason: 'spam',\n        description: 'Este comentario parece spam comercial',\n        commentId: 2,\n        reporterId: 'user_456',\n        createdAt: '2025-06-21T08:30:00Z',\n        status: 'pending'\n    }\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/services/mockData.ts\n");

/***/ }),

/***/ "(ssr)/./src/services/posts.ts":
/*!*******************************!*\
  !*** ./src/services/posts.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createPost: () => (/* binding */ createPost),\n/* harmony export */   deletePost: () => (/* binding */ deletePost),\n/* harmony export */   getAllPosts: () => (/* binding */ getAllPosts),\n/* harmony export */   getPostById: () => (/* binding */ getPostById),\n/* harmony export */   getUserPosts: () => (/* binding */ getUserPosts),\n/* harmony export */   updatePostStatus: () => (/* binding */ updatePostStatus)\n/* harmony export */ });\n/* harmony import */ var _mockData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mockData */ \"(ssr)/./src/services/mockData.ts\");\n// Servicios para gestionar los posts (VERSION MOCK)\n\n// Cuando conectemos con el backend, usaremos esta URL\n// const API_URL = 'http://localhost:4000';\n// Función para generar un ID único\nconst generateId = ()=>{\n    return Math.max(0, ..._mockData__WEBPACK_IMPORTED_MODULE_0__.mockPosts.map((post)=>post.id)) + 1;\n};\nasync function createPost(userId, data, token) {\n    // Simulamos una demora de red\n    await new Promise((resolve)=>setTimeout(resolve, 800));\n    try {\n        // En un caso real, enviaríamos esto al servidor\n        const newPost = {\n            id: generateId(),\n            title: data.title,\n            content: data.content,\n            date: new Date().toISOString(),\n            status: 'pending',\n            likes: 0,\n            userId,\n            // Simulamos datos de usuario basados en el usuario actual\n            user: {\n                name: 'Usuario Actual',\n                nickname: 'usuario',\n                clerkId: userId\n            }\n        };\n        // Agregamos el post a nuestra colección simulada\n        _mockData__WEBPACK_IMPORTED_MODULE_0__.mockPosts.push(newPost);\n        return newPost;\n    } catch (error) {\n        console.error('[createPost] Error:', error);\n        throw error;\n    }\n}\nasync function getAllPosts(token) {\n    // Simulamos una demora de red\n    await new Promise((resolve)=>setTimeout(resolve, 500));\n    try {\n        // Devolvemos directamente los posts simulados\n        return [\n            ..._mockData__WEBPACK_IMPORTED_MODULE_0__.mockPosts\n        ]; // Devolvemos una copia para evitar mutaciones\n    } catch (error) {\n        console.error('[getAllPosts] Error:', error);\n        throw error;\n    }\n}\nasync function getPostById(id, token) {\n    // Simulamos una demora de red\n    await new Promise((resolve)=>setTimeout(resolve, 300));\n    try {\n        // Buscamos el post por ID en nuestros datos simulados\n        const post = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockPosts.find((post)=>post.id === id);\n        if (!post) {\n            throw new Error('Publicación no encontrada');\n        }\n        return {\n            ...post\n        }; // Devolvemos una copia para evitar mutaciones\n    } catch (error) {\n        console.error('[getPostById] Error:', error);\n        throw error;\n    }\n}\nasync function getUserPosts(userId, token) {\n    // Simulamos una demora de red\n    await new Promise((resolve)=>setTimeout(resolve, 400));\n    try {\n        // Filtramos los posts del usuario directamente de nuestros datos simulados\n        const userPosts = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockPosts.filter((post)=>post.userId === userId || post.user?.clerkId === userId);\n        return [\n            ...userPosts\n        ]; // Devolvemos una copia para evitar mutaciones\n    } catch (error) {\n        console.error('[getUserPosts] Error:', error);\n        throw error;\n    }\n}\nasync function deletePost(id, token) {\n    // Simulamos una demora de red\n    await new Promise((resolve)=>setTimeout(resolve, 600));\n    try {\n        // Buscamos el índice del post en nuestros datos simulados\n        const postIndex = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockPosts.findIndex((post)=>post.id === id);\n        if (postIndex === -1) {\n            throw new Error('Publicación no encontrada');\n        }\n        // Eliminamos el post de nuestros datos simulados\n        _mockData__WEBPACK_IMPORTED_MODULE_0__.mockPosts.splice(postIndex, 1);\n        return true; // La eliminación fue exitosa\n    } catch (error) {\n        console.error('[deletePost] Error:', error);\n        throw error;\n    }\n}\nasync function updatePostStatus(id, status, token) {\n    // Simulamos una demora de red\n    await new Promise((resolve)=>setTimeout(resolve, 500));\n    try {\n        // Buscamos el post en nuestros datos simulados\n        const post = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockPosts.find((post)=>post.id === id);\n        if (!post) {\n            throw new Error('Publicación no encontrada');\n        }\n        // Actualizamos el estado del post\n        post.status = status;\n        return {\n            ...post\n        }; // Devolvemos una copia para evitar mutaciones\n    } catch (error) {\n        console.error('[updatePostStatus] Error:', error);\n        throw error;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/services/posts.ts\n");

/***/ })

};
;